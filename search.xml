<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[并发模型与事件循环]]></title>
    <url>%2F2018%2F04%2F25%2FJavaScriptEventLoop%2F</url>
    <content type="text"><![CDATA[JavaScript的并发模型 基于 事件循环，因为js是单线程，同一时间只能执行一个任务，所有的任务代码 都必须排队一个接着一个等待着js解释器 解释执行。 运行时概念栈一个函数调用会形成一个栈帧，这个栈帧里初始化着该函数的词法环境（包含该函数环境下的 形参，函数声明，变量声明 以及 外部环境的引用） 堆对象在内存初始化的地方，一片非结构化的内存区域。（栈、队列都是数据结构的实现，会对应到 一片结构化的内存区域） 队列在事件循环期间的某个时间点，运行时开始处理队列中的消息，依照队列先进先出的原则，从最先到的一个开始处理。 之后，消息将从队列中移除，并将其消息作为输入参数调用其相应的回调函数。 与正常的同步代码一样，调用一个函数会为该函数创建一个新的栈帧。 事件循环js线程在执行完同步代码后 会不停的 轮询 消息队列（按阮一峰老师的说法，任务队列、消息队列、事件队列 可以理解为同一个。原话：”任务队列”是一个事件的队列（也可以理解成消息的队列））， 查看是否存在需要处理的消息。 类似 这种：123while (queue.waitForMessage()) &#123; queue.processNextMessage();&#125; 如果当前没有消息，线程会同步的等待异步消息的到达。（意思是 异步消息一抵达，立马就能 入栈执行）。 同步任务、异步任务、宏任务、微任务这四个术语并不是各自独立的，所有的任务可以分为 同步、异步两种；但为了更好的理解 JS的异步执行 将任务分为 宏任务、微任务。以下是我自己的理解：同步任务是指：无需经过事件循环 直接进入 执行栈 执行的任务代码；异步任务则是： 第一时间无法进入执行栈，需通过 进入任务队列，通过事件循环才能进入 执行栈 的任务代码。宏任务：setTimeout，setInterval，ajax，dom操作 等代码产生的任务都属于宏任务，异步任务会进入到任务队列之中]]></content>
  </entry>
  <entry>
    <title><![CDATA[浏览器从输入URL到页面加载发生了什么]]></title>
    <url>%2F2018%2F04%2F15%2F%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BB%8E%E8%BE%93%E5%85%A5URL%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[##输入地址在地址栏刚输入几个字符时，可以看到地址栏已经开始检索了，并根据输入字符 提供出模糊检索选项供选择跳转。此时浏览器正通过查找 之前发出的请求记录，书签等方式给出提示。 ##按下跳转（Enter）键输入URL跳转之后，浏览器发起对目标资源的请求，但由于互联网中各个计算机直接的寻址都是通过IP地址查找完成的，因此键入的URL是域名时，第一时间是无法定位目标服务器主机在互联网中的位置的，还需要将URL转换为具体的IP地址，这一过程（找到域名与IP地址之间的一一对应关系）是通过 DNS解析 完成的，这期间浏览器通常是有会有发出DNS请求的。 其实这个过程很像你在手机通讯录里搜索联系人准备打电话。当你在搜索框输入 “哥哥” 通俗来讲就是 地址栏的域名url无法用来构造http请求报文 浏览器需要 ##发送http请求通过DNS解析的过程，浏览器拿到http请求的目标计算机IP地址，于是开始构造请求报文，并尝试与服务器建立TCP连接，三次握手建立连接后，开始发送http报文。 这是访问 百度 的请求报文，包含请求头（1~8）和正文（9）： 1. 请求方法（GET）、请求的资源（/）即：根目录下默认的index、使用的http协议版本（HTTP/1.1）； 2. 请求的主机（host）：www.baidu.com； 3. 连接状态：保持连接（keep-alive），避免后续 一些图片、js等资源的请求加载又得重新建立连接TCP； 4. 用户代理：包含请求方的操作系统版本、CPU类型、浏览器版本等； 5. 客户端建议服务器返回数据的报文格式； 6. 客户端接受的内容编码（压缩）格式； 7. 客户端可理解的语言； 8. cookie：便于服务器进行身份验证,session跟踪的会话信息。（可以弥补http短连接的缺陷） 9.请求信息：也就是正文，请求头和请求正文之间是一个空行。get方式下，一般是在url里就能看到正文信息，如https://www.baidu.com/s?wd=cookie中的 **wd=cookie** 123456789GET / HTTP/1.1Host: www.baidu.comConnection: keep-aliveUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.79 Safari/537.36Upgrade-Insecure-Requests: 1Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8Accept-Encoding: gzip, deflate, brAccept-Language: zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4Cookie: BIDUPSID=D735A7E73027171710B93172CA241933 ##服务器接收请求处理并响应请求报文经过路由层层转发来到目标服务器，web服务器 通过报文解析 拿到必要的请求信息，对于一般的静态资源会直接返回给浏览器客户端，一些动态请求则会调用后端程序，这期间一般还会伴随有对数据库发起的数据请求，处理结束得到返回结果后web服务器就开始着手构造响应报文，并通过刚才的连接会话返回报文数据。响应报文格式与请求报文格式 结构基本一样,包括响应报文头和正文。如下：1234567HTTP/1.1 200 OKConnection: Keep-AliveContent-Length: 95Content-Type: baiduApp/json; v6.27.2.14; charset=UTF-8Date: Sun, 15 Apr 2018 15:29:07 GMTExpires: Sun, 15 Apr 2018 16:29:07 GMTServer: suggestion.baidu.zbb.df 1.由协议版本，状态码，状态描述信息构成的状态行；2.包含 响应报文大小，报文缓存信息， cookie的设置信息等。 ###状态行相关拓展状态行： 状态行由协议版本、数字形式的状态代码、及相应的状态描述，各元素之间以空格分隔。 格式: HTTP-Version Status-Code Reason-Phrase CRLF 例如: HTTP/1.1 200 OK \r\n – 协议版本：是用http1.0还是其他版本 – 状态描述：状态描述给出了关于状态代码的简短的文字描述。比如状态代码为200时的描述为 ok – 状态代码：状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值。如下 1xx：信息性状态码，表示服务器已接收了客户端请求，客户端可继续发送请求。 100 Continue 101 Switching Protocols 2xx：成功状态码，表示服务器已成功接收到请求并进行处理。 200 OK 表示客户端请求成功 204 No Content 成功，但不返回任何实体的主体部分 206 Partial Content 成功执行了一个范围（Range）请求 3xx：重定向状态码，表示服务器要求客户端重定向。 301 Moved Permanently 永久性重定向，响应报文的Location首部应该有该资源的新URL 302 Found 临时性重定向，响应报文的Location首部给出的URL用来临时定位资源 303 See Other 请求的资源存在着另一个URI，客户端应使用GET方法定向获取请求的资源 304 Not Modified 服务器内容没有更新，可以直接读取浏览器缓存 307 Temporary Redirect 临时重定向。与302 Found含义一样。302禁止POST变换为GET，但实际使用时并不一定，307则更多浏览器可能会遵循这一标准，但也依赖于浏览器具体实现 4xx：客户端错误状态码，表示客户端的请求有非法内容。 400 Bad Request 表示客户端请求有语法错误，不能被服务器所理解 401 Unauthonzed 表示请求未经授权，该状态代码必须与 WWW-Authenticate 报头域一起使用 403 Forbidden 表示服务器收到请求，但是拒绝提供服务，通常会在响应正文中给出不提供服务的原因 404 Not Found 请求的资源不存在，例如，输入了错误的URL 5xx：服务器错误状态码，表示服务器未能正常处理客户端的请求而出现意外错误。 500 Internel Server Error 表示服务器发生不可预期的错误，导致无法完成客户端的请求 503 Service Unavailable 表示服务器当前不能够处理客户端的请求，在一段时间之后，服务器可能会恢复正常 ##浏览器接收到响应报文 对于前端来说，这部分才是重头戏，所以会多费些笔墨来写。以最通常的例子，浏览器从响应报文中解析出html正文后，这时候浏览器的渲染引擎开始工作了。渲染引擎的主要工作分为三个大的流程： 1. **创建呈现树**：通过解析htm标记语言构建DOM树,同时将外联、嵌入、内联的css样式数据也解析出来，并对应到DOM树上，从而完成**呈现树**的构建。 2. **布局**：呈现树构建完成时只包含尺寸，颜色一类的视觉属性，但元素具体的位置、大小信息还需要经过计算才能确定，这一过程就叫做布局， 3. **绘制** 首先呈现引擎将开始解析 HTML 文档，并将各标记逐个转化成“内容树”上的 DOM 节点。同时也会解析外部 CSS 文件以及样式元素中的样式数据。HTML 中这些带有视觉指令的样式信息将用于创建另一个树结构：呈现树（Render Tree）。]]></content>
  </entry>
  <entry>
    <title><![CDATA[思]]></title>
    <url>%2F2018%2F04%2F01%2Fmiss%2F</url>
    <content type="text"><![CDATA[行至水穷处，坐看云起时。是行也思君，坐也思君。]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>诗词</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[myFirst]]></title>
    <url>%2F2018%2F03%2F27%2FmyFirst%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy]]></content>
      <tags>
        <tag>first</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F03%2F25%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
